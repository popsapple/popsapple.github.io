{
  "compilerOptions": {
    /* 기본 옵션
     * ------------------------------------------------------------------------------------------------------------------------------------------------ */
    "incremental": true /* 증분 컴파일 활성화 */,
    "target": "es5" /* 빌드시 나올 버전 */,
    "module": "es6" /* 코드에 사용될 module 방식 */,
    "lib": [
      "dom",
      "scripthost",
      "es6"
    ] /* 컴파일 과정에 사용될 라이브러리 파일 설정 */,
    "allowJs": true /* JavaScript 파일 컴파일 허용 */,
    "checkJs": true /* .js 파일 오류 리포트 설정 */,
    "jsx": "react" /* 생성될 JSX 코드 설정: 'preserve', 'react-native', or 'react'. */,
    "declaration": true /* '.d.ts' 파일 생성 설정 */,
    "declarationMap": true /* 해당하는 각 '.d.ts'파일에 대한 소스 맵 생성 */,
    "sourceMap": true /* 소스맵 '.map' 파일 생성 설정 */,
    // "outFile": "./" /* 복수 파일을 묶어 하나의 파일로 출력 설정 */,
    "outDir": "./build" /* 출력될 디렉토리 설정 */,
    "rootDir": "./" /* 입력 파일들의 루트 디렉토리 설정. --outDir 옵션을 사용해 출력 디렉토리 설정이 가능 */,
    // "composite": true /* 프로젝트 컴파일 활성화 */,
    "removeComments": true /* 출력 시, 주석 제거 설정 */,
    /* 엄격한 유형 검사 옵션
     * ------------------------------------------------------------------------------------------------------------------------------------------------ */
    "strict": true /* 모든 엄격한 유형 검사 옵션 활성화 */,
    "noImplicitAny": false /* 명시적이지 않은 'any' 유형으로 표현식 및 선언 사용 시 오류 발생 */,
    "strictNullChecks": false /* 엄격한 null 검사 사용 */,
    /* 모듈 분석 옵션 -  여기서의 module은 node_modules 의 그 모듈이 아니라 사용자라 모듈로 작성한 코드를 말함 (import 가능한...)
     * ------------------------------------------------------------------------------------------------------------------------------------------------ */
    "moduleResolution": "node" /* 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic' (TypeScript pre-1.6). */,
    "baseUrl": "./" /* 절대 경로 모듈이 아닌, 모듈이 기본적으로 위치한 디렉토리 설정 (예: './modules-name') */,
    "paths": { /* baseUrl 기반으로 import 할 모듈들의 별명을 지정 */
      "@utils/*": ["./src/utils/*"],
      "@components/*": ["./src/components/*"]
    },
    "rootDirs": ["src"] /* 이 안애 있는 경로들은 root 로 인식되어서 하위 컴포넌트에들에서 경로를 동일하게 공유하는걸로 판단 */,
    "typeRoots" : ["./node_modules/@types", "./types"] /* 유형 정의를 포함할 디렉토리 목록 */,
    // "types": ["lodash", "core"] /* 이걸 선언할 경우 typeRoots 에서 lodash, core 두개만 반영하겠다는 의미임 */,
    "esModuleInterop": true /* 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공. 'allowSyntheticDefaultImports' 암시 */,
    /* 소스맵 옵션
     * ------------------------------------------------------------------------------------------------------------------------------------------------ */
    "sourceRoot": "./" /* 디버거(debugger)가 소스 위치 대신 TypeScript 파일을 찾을 위치 설정 */,
    "mapRoot": "./" /* 디버거가 생성된 위치 대신 맵 파일을 찾을 위치 설정 */,
    // "inlineSourceMap": true /* 하나의 인라인 소스맵을 내보내도록 설정 */,
    "inlineSources": true /* 하나의 파일 안에 소스와 소스 코드를 함께 내보내도록 설정. '--inlineSourceMap' 또는 '--sourceMap' 설정이 필요 */,
    /* 실험적인 기능 옵션
     * ------------------------------------------------------------------------------------------------------------------------------------------------ */
    "experimentalDecorators": true /* ES7 데코레이터(decorators) 실험 기능 지원 설정 */,
    "emitDecoratorMetadata": true /* 데코레이터를 위한 유형 메타데이터 방출 실험 기능 지원 설정 */,
  },
  "include": ["src/**/*.tsx","src/**/*.ts"],
  "exclude": ["node_modules"]
}
